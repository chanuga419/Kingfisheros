; File: boot.asm
; To be assembled with NASM: nasm -f bin boot.asm -o boot.bin

bits 16             ; Tell NASM we are generating 16-bit code
org 0x7c00          ; Tell NASM the code will be loaded at memory address 0x7C00

start:
    ; Set up segments (important for consistent operation)
    mov ax, 0x07c0      ; BIOS loads the boot sector at 0x7c00:0000, 
    mov ds, ax          ; so DS (Data Segment) should point there.
    mov es, ax
    mov ss, ax          ; Set SS (Stack Segment) and SP (Stack Pointer)
    mov sp, 0x7c00      ; to a safe location (e.g., the start of the boot sector)

    ; Print the boot message
    mov si, boot_message    ; SI (Source Index) points to the string
.print_char_loop:
    lodsb               ; Load byte from [DS:SI] into AL, then increment SI
    cmp al, 0           ; Check for null terminator (end of string)
    je .halt_cpu        ; If AL is 0, jump to halt
    
    ; Use BIOS Interrupt 0x10 to print the character
    mov ah, 0x0e        ; AH = 0x0E (Teletype Output function)
    mov bh, 0           ; BH = 0 (Display Page)
    int 0x10            ; Call BIOS video services interrupt

    jmp .print_char_loop; Continue the loop

.halt_cpu:
    cli                 ; Disable interrupts
    hlt                 ; Halt the CPU (stops execution)

; --- Data Section ---
boot_message db 'kingfisher os booting', 0  ; The message to print, ending with a null byte (0)

; --- Boot Sector Padding and Signature ---
; Pad the file with zeros until the size is exactly 510 bytes
times 510 - ($ - $$) db 0

; Boot Signature: Must be 0xAA55 (little-endian: 0x55 0xAA)
dw 0xaa55
